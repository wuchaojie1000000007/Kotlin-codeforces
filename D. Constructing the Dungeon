package com.example.codetest


private fun readLn() = readLine()!! // string line
private fun readInt() = readLn().toInt() // single int
private fun readStrings() = readLn().split(" ") // list of strings
private fun readInts() = readStrings().map { it.toInt() } // list of ints



fun main() {
    val numOfTest: Int = readInt()
    for (i in 1..numOfTest) {
        val (rooms, tunnels) = readInts()
        val tunnelsList: MutableList<List<Int>> = mutableListOf()
        for (i in 1..tunnels) {
            tunnelsList.add(readInts())
        }
        val roomsList: MutableList<Int> =  MutableList(rooms) { 0 }
        for (item in tunnelsList) {
            updateTunnels(roomsList, item)
        }
        val condition: Array<Boolean> = Array(tunnels) {true}
        for (i in 0..tunnelsList.size-1) {
            condition[i] = checkConditions(roomsList, tunnelsList[i])
        }
        if (condition.contains(false)){
            println("NO")
        } else {
            println("YES")
            println(roomsList.joinToString(" "))
        }
    }
}

fun updateTunnels(roomsList: MutableList<Int>, tunnel: List<Int>) {
    val (a, b, c) = tunnel
    if (roomsList[a - 1] < c ) {roomsList[a - 1] = c }
    if (roomsList[b - 1] < c ) {roomsList[b - 1] = c }
}

fun checkConditions(roomsList: MutableList<Int>, tunnel: List<Int>) : Boolean{
    val (a, b, c) = tunnel
    if (c >= minOf(roomsList[a - 1], roomsList[b - 1]))
        return true
    else return false
}



